Objetos literales 
Objetos por constructor (Plantila inicia en mayuscula)

Selector DOM:
    En JavaScript, los selectores DOM son herramientas que permiten acceder y manipular elementos en el documento HTML. Los métodos más comunes incluyen getElementById, getElementsByClassName, getElementsByTagName, querySelector y querySelectorAll. Estos métodos utilizan diferentes tipos de selectores para localizar elementos en el DOM.

Eventos:
    Usuario:Toda accion que realiza un usuario sobre la aplicaion(click,doble click,scroll.etc)
    Documento:Toda accion que se desencadena por un evento de usuario (todo lo que sucede por debajo del codigo)
Para definir un evento  usamos el addevenlistener el cual necesita de dos argumentos: evento y la accion    

getElementsByTagName y/o querySelectorAll ambos me retornan un listado de  elementos "arreglos"

Arreglos: conjuntos de datos almacenados en una misma variable 
    Tamaño-> Esta definido con la cantidad de elementos que contiene el arreglos
    Posicion-> Esta definida por la cntidad de elementos -1
Un arreglo en JavaScript puede almacenar  cualquier tipo de dato, incluso otros arreglos, numeros, texto, booleanos,  objetos, etc.

Tarea:Metodos de arreglos ,map, find, filter, some, foreach, push, pop, slice,  "shift y unshift"

Modulos:
    Export e import


1. map()
El método map() crea un nuevo arreglo con los resultados de aplicar una función a cada elemento del arreglo original.

Ejemplo:

javascript

Edit
Copy code
const numeros = [1, 2, 3, 4, 5];
const dobles = numeros.map(num => num * 2);
console.log(dobles); // [2, 4, 6, 8, 10]
2. find()
El método find() devuelve el primer elemento del arreglo que cumple con la condición especificada en la función de prueba. Si no se encuentra ningún elemento, devuelve undefined.

Ejemplo:

javascript

Edit
Copy code
const numeros = [1, 2, 3, 4, 5];
const encontrado = numeros.find(num => num > 3);
console.log(encontrado); // 4
3. filter()
El método filter() crea un nuevo arreglo con todos los elementos que pasan la prueba implementada por la función proporcionada.

Ejemplo:

javascript

Edit
Copy code
const numeros = [1, 2, 3, 4, 5];
const pares = numeros.filter(num => num % 2 === 0);
console.log(pares); // [2, 4]
4. some()
El método some() verifica si al menos un elemento del arreglo cumple con la condición especificada en la función de prueba. Devuelve true o false.

Ejemplo:

javascript

Edit
Copy code
const numeros = [1, 2, 3, 4, 5];
const hayPares = numeros.some(num => num % 2 === 0);
console.log(hayPares); // true
5. forEach()
El método forEach() ejecuta una función proporcionada una vez por cada elemento del arreglo. No devuelve un nuevo arreglo.

Ejemplo:

javascript

Edit
Copy code
const numeros = [1, 2, 3, 4, 5];
numeros.forEach(num => console.log(num * 2)); 
// Imprime: 2, 4, 6, 8, 10
6. push()
El método push() agrega uno o más elementos al final de un arreglo y devuelve la nueva longitud del arreglo.

Ejemplo:

javascript

Edit
Copy code
const frutas = ['manzana', 'banana'];
frutas.push('naranja');
console.log(frutas); // ['manzana', 'banana', 'naranja']
7. pop()
El método pop() elimina el último elemento de un arreglo y lo devuelve. Si el arreglo está vacío, devuelve undefined.

Ejemplo:

javascript

Edit
Copy code
const frutas = ['manzana', 'banana', 'naranja'];
const ultimaFruta = frutas.pop();
console.log(ultimaFruta); // 'naranja'
console.log(frutas); // ['manzana', 'banana']
8. slice()
El método slice() devuelve una copia superficial de una porción del arreglo en un nuevo arreglo. Se puede especificar el inicio y el fin de la porción.

Ejemplo:

javascript

Edit
Copy code
const frutas = ['manzana', 'banana', 'naranja', 'kiwi'];
const algunasFrutas = frutas.slice(1, 3);
console.log(algunasFrutas); // ['banana', 'naranja']
Resumen
map(): transforma los elementos de un arreglo.
find(): busca un elemento que cumpla una condición.
filter(): filtra elementos que cumplen con una condición.
some(): verifica si al menos un elemento cumple con una condición.
forEach(): ejecuta una función para cada elemento del arreglo.
push(): agrega elementos al final del arreglo.
pop(): elimina el último elemento del arreglo.
slice(): obtiene una porción del arreglo.
Estos métodos son muy útiles para manipular y trabajar con arreglos en JavaScript. Puedes combinarlos para realizar operaciones más complejas según tus necesidades. ¡Espero que esta información te sea útil para tu estudio!
    

    Ejercicio 1: Uso de shift()
Crea un programa que realice lo siguiente:

Declara un array con al menos 5 nombres.
Usa el método shift() para eliminar el primer nombre del array.
Imprime el nombre eliminado y el array resultante.
javascript

Verify
Edit
Copy code
// Tu código aquí
let nombres = ["Juan", "María", "Pedro", "Ana", "Luis"];
let primerNombre = nombres.shift();
console.log("Nombre eliminado:", primerNombre);
console.log("Array resultante:", nombres);
Ejercicio 2: Uso de unshift()
Crea un programa que realice lo siguiente:

Declara un array vacío.
Usa el método unshift() para agregar al menos 3 frutas al principio del array.
Imprime el array resultante.
javascript

Verify
Edit
Copy code
// Tu código aquí
let frutas = [];
frutas.unshift("Manzana");
frutas.unshift("Banana");
frutas.unshift("Naranja");
console.log("Array de frutas:", frutas);
Ejercicio 3: Combinando shift() y unshift()
Crea un programa que realice lo siguiente:

Declara un array con 4 números.
Usa shift() para eliminar el primer número.
Usa unshift() para agregar un nuevo número al principio del array.
Imprime el número eliminado y el array final.
javascript

Verify
Edit
Copy code
// Tu código aquí
let numeros = [1, 2, 3, 4];
let primerNumero = numeros.shift();
numeros.unshift(0);
console.log("Número eliminado:", primerNumero);
console.log("Array final:", numeros);
Ejercicio 4: Manipulación de un array de objetos
Crea un programa que realice lo siguiente:

Declara un array de objetos que representen estudiantes, cada uno con un nombre y una edad.
Usa shift() para eliminar el primer estudiante.
Usa unshift() para agregar un nuevo estudiante al principio del array.
Imprime el estudiante eliminado y el array de estudiantes resultante.
javascript

Verify
Edit
Copy code
// Tu código aquí
let estudiantes = [
    { nombre: "Carlos", edad: 20 },
    { nombre: "Laura", edad: 22 },
    { nombre: "Miguel", edad: 21 }
];

let estudianteEliminado = estudiantes.shift();
estudiantes.unshift({ nombre: "Ana", edad: 19 });

console.log("Estudiante eliminado:", estudianteEliminado);
console.log("Array de estudiantes resultante:", estudiantes);
Ejercicio 5: Juego de palabras
Crea un programa que realice lo siguiente:

Declara un array con 5 palabras.
Usa shift() para eliminar la primera palabra y mostrarla.
Usa unshift() para agregar una nueva palabra al principio del array.
Repite los pasos 2 y 3 dos veces más y muestra el array después de cada operación.
javascript

Verify
Edit
Copy code
// Tu código aquí
let palabras = ["gato", "perro", "pájaro", "pez", "conejo"];

for (let i = 0; i < 3; i++) {
    let palabraEliminada = palabras.shift();
    console.log("Palabra eliminada:", palabraEliminada);
    palabras.unshift("nuevaPalabra" + (i + 1));
    console.log("Array de palabras:", palabras);
}
Estos ejercicios te ayudarán a familiarizarte con los métodos shift() y unshift() en JavaScript. ¡Diviértete programando!